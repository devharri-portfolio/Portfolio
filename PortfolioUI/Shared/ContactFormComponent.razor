@using PortfolioUI.Models
@using PortfolioUI.Services.GoogleCaptcha
@using PortfolioUI.Services.Email 
@using System.Collections.Generic;

@inject IJSRuntime JSRuntime
@inject IGoogleCaptchaService googleCaptchaService
@inject IEmailService emailService 

@if (FormSubmitAlert)
{
    <div class="alert alert-@FormSubmitAlertClass alert-dismissible fade show" role="alert">
        @FormSubmitAlertText
        <button type="button" class="btn-close" @onclick="CloseSubmitAlert"></button>
    </div>
}

<EditForm Model="@contactFormModel" class="row justify-content-center" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <div class="text-center">
        <p class="text-muted">Want to discuss about something? Love to hear from you, write me a message!</p>
    </div>
    <div class="col-md-6">
        <div class="mb-2">
            <label for="NameContactForm" class="form-label mb-0">Name</label>
            <InputText id="nameContactForm" @bind-Value="contactFormModel.Name" class="form-control" placeholder="@RandomName"  />
        </div>
    </div>
    <div class="col-md-6">
        <div class="mb-2">
            <label for="PhoneNumberContactForm" class="form-label mb-0">Phone number</label>
            <InputText id="phoneNumberContactForm" @bind-Value="contactFormModel.PhoneNumber" class="form-control" placeholder="+358 401234567"  />
        </div>
    </div>
    <div class="col-md-12">
        <div class="mb-1">
            <label for="emailContactForm" class="form-label mb-0">Email</label>
            <InputText id="emailContactForm" @bind-Value="contactFormModel.Email" class="form-control" placeholder="example@example.com"  />
        </div>
    </div>
    <div class="col-md-12">
        <div class="mb-1">
            <label for="messageContactForm" class="form-label mb-0">Message</label>
            <InputTextArea id="messageContactForm" @bind-Value="contactFormModel.Message" class="form-control" placeholder="Type your message here" rows="3"  />
        </div>
    </div>
    <input id="tokenContactForm" type="hidden" @bind="@contactFormModel.Token" />
    <ValidationSummary />
    <div>
        <p class="grecaptcha-text">
            This site is protected by reCAPTCHA and the Google
            <a href="https://policies.google.com/privacy">Privacy Policy</a> and
            <a href="https://policies.google.com/terms">Terms of Service</a> apply.
        </p>
    </div>
    <div class="col-md-12">
        <div class="mb-3">
            <button type="submit" class="btn btn-primary">
                @if (formSubmitted){<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>}
                Send
            </button>
        </div>
    </div>

</EditForm>

@code {
    private ContactFormModel contactFormModel = new();
    bool FormSubmitAlert = false;
    string FormSubmitAlertClass = "danger";
    string FormSubmitAlertText = "default";
    bool formSubmitted = false;

    Random random = new Random();
    List<string> nameList = new List<string> { "Ken Adams", "Regina Phalange", "Clark Kent", "Max Payne", "Viljo Viljonen", "Albus Dumbledore", "Eddie Brock", "Bruce Wayne", "Mrs. Chanandler Bong" };
    private string RandomName = "";

    protected override void OnInitialized()
    {
        int index = random.Next(nameList.Count);
        RandomName = nameList[index];
    }

    //Functions after blazor has rendered all components
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // execute conditionally for loading data, otherwise this will load
        // every time the page refreshes
        if (firstRender)
        {
            // Do work to load page data and set properties
            RunReCaptchaJavascript();

            var timer = new PeriodicTimer(TimeSpan.FromSeconds(115));
            while(await timer.WaitForNextTickAsync())
            {
                RunReCaptchaJavascript();
            }
        }
    }

    private async Task HandleSubmit()
    {
        formSubmitted = true;
        //Verify token
        bool verification = await googleCaptchaService.VerifyToken(contactFormModel.Token);

        if (verification == true)
        {
            // Process the form
            bool emailSent = await emailService.SendEmail(contactFormModel.Name, contactFormModel.PhoneNumber, contactFormModel.Email, contactFormModel.Message);

            if(emailSent == true)
            {
                //Show form submit alert
                SubmitAlert("success", "Message on the way. Thank you for your message!");

                //Clear the form
                ClearForm();
            }
            else
            {
                //Show form submit alert
                SubmitAlert("danger", "Ooops something went wrong with email sending.. Please refresh the page!");

                //Clear the form
                ClearForm();
            }
        }
        else
        {
            //Show form submit alert
            SubmitAlert("danger", "Ooops something went wrong with verification.. Please refresh the page!");

            //Clear the form
            ClearForm();
        }
        formSubmitted = false;
    }

    private void RunReCaptchaJavascript()
    {
        //Run Google reCaptcha JavaScript-function from index.html for getting new Token
        JSRuntime.InvokeVoidAsync("runReCaptcha");
    }

    private void ClearForm()
    {
        //Clear the form
        contactFormModel = new();
    }

    private void SubmitAlert(string alertClass, string alertText)
    {
        //Show form submit alert
        FormSubmitAlert = true;
        FormSubmitAlertClass = alertClass;
        FormSubmitAlertText = alertText;
    }

    private void CloseSubmitAlert()
    {
        FormSubmitAlert = false;
    }
}